{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'imageList',\n  data() {\n    const options = [{\n      value: 'id',\n      label: '镜像'\n    }, {\n      value: 'version',\n      label: '镜像版本'\n    }, {\n      value: 'content',\n      label: '内容'\n    }];\n    const validataTitle = (rule, value, callback) => {\n      const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！「」——~、@]{3,12}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入标题'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('标题由3到12位的数字、字母、汉字或部分符号组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataDetail = (rule, value, callback) => {\n      const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！…. ：；，「」——~、\\s@]{15,100}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入容器详情'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('容器详情由15到100位的数字、字母、汉字或部分符号组成'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      options,\n      page: 1,\n      // 当前页\n      limit: 8,\n      // 初始化每页条目数\n      page_sizes: [8, 16, 30, 50, 100],\n      // 个数选择器\n\n      imageAddDialog: false,\n      image_status: [{\n        label: '全部',\n        value: '0'\n      }, {\n        label: '正常',\n        value: '1'\n      }, {\n        label: '超时',\n        value: '2'\n      }],\n      // 表单验证规则\n      rules: {\n        container_title: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataTitle\n        }],\n        container_detail: [{\n          required: true,\n          trigger: 'blur',\n          validator: validataDetail\n        }]\n      },\n      // 搜索容器列表的表单\n      searchForm: {\n        querySearch: '',\n        key: ''\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['imagelist', 'image_count'])\n  },\n  mounted() {\n    this.searchForm.image_status = this.image_status[0].value;\n    // 获取预约列表\n    this.getimageList();\n  },\n  methods: {\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    // 重置搜索表单\n    resetSearchForm(formname) {\n      this.resetForm(formname);\n      this.searchForm.image_status = this.image_status[0].value;\n    },\n    // 每页多少条目\n    handleSizeChange(val) {\n      this.limit = val;\n      this.page = 1;\n      this.getimageList();\n    },\n    // 当前第几页\n    handleCurrentChange(val) {\n      this.page = val;\n      this.getimageList();\n    },\n    // 搜索\n    search() {\n      this.page = 1;\n      this.limit = this.page_sizes[0];\n      this.getimageList();\n    },\n    // 获取镜像列表\n    async getimageList() {\n      try {\n        const {\n          page,\n          limit\n        } = this;\n        let querySearch = this.searchForm.querySearch;\n        let value = this.searchForm.key;\n        await this.$store.dispatch('getimageList', JSON.stringify({\n          querySearch,\n          value,\n          page,\n          limit\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 移除超时的预约信息\n    async openDialog(index, rows) {\n      await this.$confirm('确认移除该预约信息?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const {\n            image_id,\n            seat_id\n          } = rows[index];\n          await this.$store.dispatch('delimage', {\n            image_id,\n            seat_id\n          }).then(async res => {\n            this.$message({\n              type: 'success',\n              message: res\n            });\n            // 重新获取预约信息列表\n            await this.getimageList();\n          }).catch(err => this.$message({\n            type: 'warning',\n            message: err.message\n          }));\n        } catch (e) {\n          console.warn(e.message);\n        }\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消'\n        });\n      });\n    },\n    //添加镜像\n    async addimage(formname) {\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            await this.$store.dispatch('addcontainer', JSON.stringify(this.containerAddForm)).then(res => {\n              this.resetForm(formname);\n              this.imageAddDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取容器列表\n              this.getcontainerList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    }\n    // 移除所有超时的预约记录\n    // async delAllimage() {\n    //     await this.$confirm('此操作将清空超时的预约记录, 是否继续?', '提示', {\n    //         confirmButtonText: '确定',\n    //         cancelButtonText: '取消',\n    //         type: 'warning'\n    //     }).then(async () => {\n    //         try {\n    //             await this.$store.dispatch('clearTimeoutimage')\n    //                 .then(async res => {\n    //                     this.$message({ type: 'success', message: res })\n    //                     // 重新获取预约信息列表\n    //                     await this.getimageList()\n    //                 }).catch(err => this.$message({ type: 'warning', message: err.message }))\n    //         } catch (e) {\n    //             console.warn(e.message)\n    //         }\n    //     }).catch(() => { this.$message({ type: 'info', message: '已取消' }) })\n    // },\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","options","value","label","validataTitle","rule","callback","reg","trim","length","Error","test","validataDetail","page","limit","page_sizes","imageAddDialog","image_status","rules","container_title","required","trigger","validator","container_detail","searchForm","querySearch","key","computed","mounted","getimageList","methods","resetForm","formname","$refs","resetFields","resetSearchForm","handleSizeChange","val","handleCurrentChange","search","$store","dispatch","JSON","stringify","e","$message","type","message","openDialog","index","rows","$confirm","confirmButtonText","cancelButtonText","then","image_id","seat_id","res","catch","err","console","warn","addimage","validate","vaild","containerAddForm","getcontainerList"],"sources":["src/views/Index/Back/ImageList/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"image-list maxWH clearfix\">\r\n        <!-- 搜索 -->\r\n        <div class=\"search\">\r\n            <el-form ref=\"searchcontainerForm\" class=\"flex maxWH search-form\" :model=\"searchForm\" label-width=\"80px\">\r\n                <el-select v-model=\"searchForm.querySearch\" clearable placeholder=\"请选择搜索类型\">\r\n                    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n                <el-form-item label=\"\" prop=\"key\">\r\n                    <el-input v-model.trim=\"searchForm.key\" placeholder=\"请输入关键字\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item class=\"flex\" style=\"margin-left: -70px;overflow: hidden;\">\r\n                    <el-button type=\"primary\" @click.native.prevent.stop=\"search\">搜索</el-button>\r\n                    <el-button @click.native.prevent.stop=\"resetForm('searchForm')\">重置</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n        <el-button type=\"primary\" @click.native.prevent.stop=\"imageAddDialog = true\" style=\"margin: 15px 0;\">添加镜像</el-button>\r\n        <!-- 列表显示预约信息 -->\r\n        <el-table :data=\"imagelist\" border style=\"width: 100%\" max-height=\"250\">\r\n            <el-table-column prop=\"id\" label=\"序号\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"image_name\" label=\"实验项目\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"createTime\" label=\"创建时间\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"content\" label=\"说明\">\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" header-align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <div class=\"handler flex-center\">\r\n                        <el-button :disabled=\"scope.row.image_status === '正常'\"\r\n                            @click.native.prevent=\"delimage(scope.$index, imagelist)\" type=\"danger\">\r\n                            移除\r\n                        </el-button>\r\n                    </div>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <!-- 分页器 -->\r\n        <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"page\"\r\n            :page-sizes=\"page_sizes\" :page-size=\"limit\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n            :total=\"image_count\" style=\"padding: 10px 0;\">\r\n        </el-pagination>\r\n        <!-- 添加镜像 -->\r\n        <el-dialog title=\"添加镜像\" :visible.sync=\"imageAddDialog\">\r\n            <el-form ref=\"iamgeAddForm\" :model=\"iamgeAddForm\" label-width=\"120px\" :rules=\"rules\">\r\n                <el-form-item label=\"名称\" prop=\"name\">\r\n                    <el-input v-model.trim=\"iamgeAddForm.name\" autocomplete=\"off\" placeholder=\"请输入容器名称\">\r\n                    </el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"版本\" prop=\"versionid\">\r\n                    <el-input v-model.trim=\"iamgeAddForm.version\" autocomplete=\"off\" placeholder=\"请输入版本号\">\r\n                    </el-input>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\" align=\"center\">\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"addimage('iamgeAddForm')\">确 定</el-button>\r\n                <el-button @click.native.prevent.stop=\"resetForm('iamgeAddForm')\">重 置</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nexport default {\r\n    name: 'imageList',\r\n    data() {\r\n        const options = [\r\n            {\r\n                value: 'id',\r\n                label: '镜像',\r\n            },\r\n            {\r\n                value: 'version',\r\n                label: '镜像版本',\r\n            },\r\n            {\r\n                value: 'content',\r\n                label: '内容',\r\n            },\r\n\r\n        ]\r\n        const validataTitle = (rule, value, callback) => {\r\n            const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！「」——~、@]{3,12}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入标题'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('标题由3到12位的数字、字母、汉字或部分符号组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataDetail = (rule, value, callback) => {\r\n            const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！…. ：；，「」——~、\\s@]{15,100}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入容器详情'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('容器详情由15到100位的数字、字母、汉字或部分符号组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        return {\r\n            options,\r\n            page: 1, // 当前页\r\n            limit: 8, // 初始化每页条目数\r\n            page_sizes: [8, 16, 30, 50, 100], // 个数选择器\r\n\r\n            imageAddDialog: false,\r\n            image_status: [\r\n                { label: '全部', value: '0' },\r\n                { label: '正常', value: '1' },\r\n                { label: '超时', value: '2' },\r\n            ],\r\n            // 表单验证规则\r\n            rules: {\r\n                container_title: [{ required: true, trigger: ['blur', 'change'], validator: validataTitle }],\r\n                container_detail: [{ required: true, trigger: 'blur', validator: validataDetail }],\r\n            },\r\n            // 搜索容器列表的表单\r\n            searchForm: {\r\n                querySearch: '',\r\n                key: '',\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters(['imagelist', 'image_count'])\r\n    },\r\n    mounted() {\r\n        this.searchForm.image_status = this.image_status[0].value\r\n        // 获取预约列表\r\n        this.getimageList()\r\n    },\r\n    methods: {\r\n        // 重置表单\r\n        resetForm(formname) {\r\n            this.$refs[formname].resetFields()\r\n        },\r\n        // 重置搜索表单\r\n        resetSearchForm(formname) {\r\n            this.resetForm(formname)\r\n            this.searchForm.image_status = this.image_status[0].value\r\n        },\r\n        // 每页多少条目\r\n        handleSizeChange(val) {\r\n            this.limit = val\r\n            this.page = 1\r\n            this.getimageList()\r\n        },\r\n        // 当前第几页\r\n        handleCurrentChange(val) {\r\n            this.page = val\r\n            this.getimageList()\r\n        },\r\n        // 搜索\r\n        search() {\r\n            this.page = 1\r\n            this.limit = this.page_sizes[0]\r\n            this.getimageList()\r\n        },\r\n        // 获取镜像列表\r\n        async getimageList() {\r\n            try {\r\n                const { page, limit } = this\r\n                let querySearch = this.searchForm.querySearch\r\n                let value = this.searchForm.key\r\n                await this.$store.dispatch('getimageList', JSON.stringify({ querySearch, value, page, limit }))\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n        // 移除超时的预约信息\r\n        async openDialog(index, rows) {\r\n            await this.$confirm('确认移除该预约信息?', '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                try {\r\n                    const { image_id, seat_id } = rows[index]\r\n                    await this.$store.dispatch('delimage', { image_id, seat_id })\r\n                        .then(async res => {\r\n                            this.$message({ type: 'success', message: res })\r\n                            // 重新获取预约信息列表\r\n                            await this.getimageList()\r\n                        }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                } catch (e) {\r\n                    console.warn(e.message)\r\n                }\r\n            }).catch(() => { this.$message({ type: 'info', message: '已取消' }) })\r\n        },\r\n\r\n        //添加镜像\r\n        async addimage(formname) {\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    try {\r\n                        await this.$store.dispatch('addcontainer', JSON.stringify(this.containerAddForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.imageAddDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取容器列表\r\n                                this.getcontainerList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        // 移除所有超时的预约记录\r\n        // async delAllimage() {\r\n        //     await this.$confirm('此操作将清空超时的预约记录, 是否继续?', '提示', {\r\n        //         confirmButtonText: '确定',\r\n        //         cancelButtonText: '取消',\r\n        //         type: 'warning'\r\n        //     }).then(async () => {\r\n        //         try {\r\n        //             await this.$store.dispatch('clearTimeoutimage')\r\n        //                 .then(async res => {\r\n        //                     this.$message({ type: 'success', message: res })\r\n        //                     // 重新获取预约信息列表\r\n        //                     await this.getimageList()\r\n        //                 }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n        //         } catch (e) {\r\n        //             console.warn(e.message)\r\n        //         }\r\n        //     }).catch(() => { this.$message({ type: 'info', message: '已取消' }) })\r\n        // },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.image-list {\r\n    .search {\r\n        width: 100%;\r\n        height: 80px;\r\n        box-sizing: border-box;\r\n        border: 1px solid rgb(220, 220, 220);\r\n        padding-top: 15px;\r\n        overflow: hidden;\r\n\r\n        .search-form {\r\n            min-width: 400px;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":"AAkEA,SAAAA,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA,MAAAC,OAAA,IACA;MACAC,KAAA;MACAC,KAAA;IACA,GACA;MACAD,KAAA;MACAC,KAAA;IACA,GACA;MACAD,KAAA;MACAC,KAAA;IACA,EAEA;IACA,MAAAC,aAAA,GAAAA,CAAAC,IAAA,EAAAH,KAAA,EAAAI,QAAA;MACA,MAAAC,GAAA;MACA,IAAAL,KAAA,CAAAM,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA,YAAAH,GAAA,CAAAI,IAAA,CAAAT,KAAA,CAAAM,IAAA;QACAF,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA,MAAAM,cAAA,GAAAA,CAAAP,IAAA,EAAAH,KAAA,EAAAI,QAAA;MACA,MAAAC,GAAA;MACA,IAAAL,KAAA,CAAAM,IAAA,GAAAC,MAAA;QACAH,QAAA,KAAAI,KAAA;MACA,YAAAH,GAAA,CAAAI,IAAA,CAAAT,KAAA,CAAAM,IAAA;QACAF,QAAA,KAAAI,KAAA;MACA;QACAJ,QAAA;MACA;IACA;IACA;MACAL,OAAA;MACAY,IAAA;MAAA;MACAC,KAAA;MAAA;MACAC,UAAA;MAAA;;MAEAC,cAAA;MACAC,YAAA,GACA;QAAAd,KAAA;QAAAD,KAAA;MAAA,GACA;QAAAC,KAAA;QAAAD,KAAA;MAAA,GACA;QAAAC,KAAA;QAAAD,KAAA;MAAA,EACA;MACA;MACAgB,KAAA;QACAC,eAAA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAlB;QAAA;QACAmB,gBAAA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAV;QAAA;MACA;MACA;MACAY,UAAA;QACAC,WAAA;QACAC,GAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,GAAA7B,UAAA;EACA;EACA8B,QAAA;IACA,KAAAJ,UAAA,CAAAP,YAAA,QAAAA,YAAA,IAAAf,KAAA;IACA;IACA,KAAA2B,YAAA;EACA;EACAC,OAAA;IACA;IACAC,UAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,WAAA;IACA;IACA;IACAC,gBAAAH,QAAA;MACA,KAAAD,SAAA,CAAAC,QAAA;MACA,KAAAR,UAAA,CAAAP,YAAA,QAAAA,YAAA,IAAAf,KAAA;IACA;IACA;IACAkC,iBAAAC,GAAA;MACA,KAAAvB,KAAA,GAAAuB,GAAA;MACA,KAAAxB,IAAA;MACA,KAAAgB,YAAA;IACA;IACA;IACAS,oBAAAD,GAAA;MACA,KAAAxB,IAAA,GAAAwB,GAAA;MACA,KAAAR,YAAA;IACA;IACA;IACAU,OAAA;MACA,KAAA1B,IAAA;MACA,KAAAC,KAAA,QAAAC,UAAA;MACA,KAAAc,YAAA;IACA;IACA;IACA,MAAAA,aAAA;MACA;QACA;UAAAhB,IAAA;UAAAC;QAAA;QACA,IAAAW,WAAA,QAAAD,UAAA,CAAAC,WAAA;QACA,IAAAvB,KAAA,QAAAsB,UAAA,CAAAE,GAAA;QACA,WAAAc,MAAA,CAAAC,QAAA,iBAAAC,IAAA,CAAAC,SAAA;UAAAlB,WAAA;UAAAvB,KAAA;UAAAW,IAAA;UAAAC;QAAA;MACA,SAAA8B,CAAA;QACA,KAAAC,QAAA;UAAAC,IAAA;UAAAC,OAAA,EAAAH,CAAA,CAAAG;QAAA;MACA;IACA;IACA;IACA,MAAAC,WAAAC,KAAA,EAAAC,IAAA;MACA,WAAAC,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAP,IAAA;MACA,GAAAQ,IAAA;QACA;UACA;YAAAC,QAAA;YAAAC;UAAA,IAAAN,IAAA,CAAAD,KAAA;UACA,WAAAT,MAAA,CAAAC,QAAA;YAAAc,QAAA;YAAAC;UAAA,GACAF,IAAA,OAAAG,GAAA;YACA,KAAAZ,QAAA;cAAAC,IAAA;cAAAC,OAAA,EAAAU;YAAA;YACA;YACA,WAAA5B,YAAA;UACA,GAAA6B,KAAA,CAAAC,GAAA,SAAAd,QAAA;YAAAC,IAAA;YAAAC,OAAA,EAAAY,GAAA,CAAAZ;UAAA;QACA,SAAAH,CAAA;UACAgB,OAAA,CAAAC,IAAA,CAAAjB,CAAA,CAAAG,OAAA;QACA;MACA,GAAAW,KAAA;QAAA,KAAAb,QAAA;UAAAC,IAAA;UAAAC,OAAA;QAAA;MAAA;IACA;IAEA;IACA,MAAAe,SAAA9B,QAAA;MACA,WAAAC,KAAA,CAAAD,QAAA,EAAA+B,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA;YACA,WAAAxB,MAAA,CAAAC,QAAA,iBAAAC,IAAA,CAAAC,SAAA,MAAAsB,gBAAA,GACAX,IAAA,CAAAG,GAAA;cACA,KAAA1B,SAAA,CAAAC,QAAA;cACA,KAAAhB,cAAA;cACA,KAAA6B,QAAA;gBAAAC,IAAA;gBAAAC,OAAA,EAAAU;cAAA;cACA;cACA,KAAAS,gBAAA;YACA,GAAAR,KAAA,CAAAC,GAAA,SAAAd,QAAA;cAAAC,IAAA;cAAAC,OAAA,EAAAY,GAAA,CAAAZ;YAAA;UACA,SAAAH,CAAA;YACA,KAAAC,QAAA;cAAAC,IAAA;cAAAC,OAAA,EAAAH,CAAA,CAAAG;YAAA;UACA;QACA;MACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}