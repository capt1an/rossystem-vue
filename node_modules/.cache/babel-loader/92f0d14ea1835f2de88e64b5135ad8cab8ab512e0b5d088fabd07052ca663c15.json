{"ast":null,"code":"import { test_status_true, test_status_false } from '@/config';\nimport { user_status_true, user_status_false } from '@/config';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'UserList',\n  data() {\n    const validataAccount = (rule, value, callback) => {\n      // const reg = /^[0-9]{6,12}$/\n      const reg = /^[\\u4e00-\\u9fa5]{1,7}$|^[\\dA-Za-z_]{1,14}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入账号'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('实验名不能超过7个汉字或者14个字符'));\n      } else {\n        callback();\n      }\n    };\n    const validataUsername = (rule, value, callback) => {\n      //const reg = /^[\\u4e00-\\u9fa5]{2,6}$/\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入用户名'));\n      } else {\n        callback();\n      }\n    };\n    const validataPassword = (rule, value, callback) => {\n      const reg = /^[a-zA-Z0-9_]{8,12}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入密码'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('密码由8到12位的字母、数字或下划线组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataAddUserPassword1 = (rule, value, callback) => {\n      if (this.userAddForm.password.trim() === '') {\n        callback(new Error('请先输入密码'));\n      } else if (value.trim().length <= 0) {\n        callback(new Error('确认密码不得为空'));\n      } else if (value.trim() !== this.userAddForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    const validataUpdateUserPassword1 = (rule, value, callback) => {\n      if (this.userUpdateForm.password.trim() === '') {\n        callback(new Error('请先输入密码'));\n      } else if (value.trim().length <= 0) {\n        callback(new Error('确认密码不得为空'));\n      } else if (value.trim() !== this.userUpdateForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      // 表单验证规则\n      rules: {\n        account: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataAccount\n        }],\n        username: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataUsername\n        }],\n        password: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataPassword\n        }],\n        adduserpwd1: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataAddUserPassword1\n        }],\n        updateuserpwd1: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataUpdateUserPassword1\n        }],\n        test_status: [{\n          required: true,\n          message: '请选择用户状态',\n          trigger: 'change'\n        }]\n      },\n      user_status: [{\n        label: '全部',\n        value: '0'\n      }, {\n        label: user_status_true,\n        value: '1'\n      }, {\n        label: user_status_false,\n        value: '2'\n      }],\n      test_status: [{\n        label: '全部',\n        value: '0'\n      }, {\n        label: test_status_true,\n        value: '1'\n      }, {\n        label: test_status_false,\n        value: '2'\n      }],\n      // 搜索用户列表的表单\n      searchForm: {\n        account: '',\n        username: '',\n        user_status: ''\n      },\n      // 当前页\n      page_no: 1,\n      // 初始化每页条目数\n      page_size: 8,\n      // 个数选择器\n      page_sizes: [8, 16, 30, 50, 100],\n      // 添加实验信息的表单\n      testAddDialog: false,\n      // 修改用户信息的表单\n      userUpdateDialog: false,\n      // 添加实验信息表单\n      testAddForm: {\n        account: '',\n        username: '',\n        test_status: ''\n      },\n      // 修改用户信息表单\n      userUpdateForm: {\n        user_id: 0,\n        // 用户id\n        account: '',\n        // 账号\n        username: '',\n        // 用户名\n        update_pwd: false,\n        // 是否修改密码\n        password: '',\n        // 密码\n        updateuserpwd1: '',\n        // 确认密码\n        user_status: user_status_true // 用户状态\n      }\n    };\n  },\n\n  watch: {\n    // 修改用户信息时监听是否需要修改密码\n    'userUpdateForm.update_pwd': {\n      deep: true,\n      handler(val) {\n        if (!val) {\n          this.userUpdateForm.password = '';\n          this.userUpdateForm.updateuserpwd1 = '';\n        }\n      }\n    }\n  },\n  // vuex中mapGetters的使用\n  computed: {\n    ...mapGetters(['user_id', 'userlist', 'testlist', 'user_count'])\n  },\n  mounted() {\n    this.searchForm.user_status = this.user_status[0].value;\n    // 获取用户列表\n    this.getUserList();\n    this.getTestList();\n  },\n  methods: {\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    // 添加用户信息\n    async addUser(formname) {\n      console.log(this.$refs[formname]);\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          console.log('11111');\n          return;\n          try {\n            await this.$store.dispatch('addUser', JSON.stringify(this.userAddForm)).then(res => {\n              this.resetForm(formname);\n              this.testAddDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getUserList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 添加实验\n    async addTest(formname) {\n      // console.log(this.$refs[formname])\n      // return\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            await this.$store.dispatch('addTest', JSON.stringify(this.testAddForm)).then(res => {\n              this.resetForm(formname);\n              this.testAddDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getTestList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 打开修改用户信息的遮罩页\n    openUpdateUser(index, rows) {\n      this.userUpdateDialog = true;\n      const userinfo = rows[index];\n      // 获取当前用户的信息\n      this.userUpdateForm = {\n        user_id: userinfo.user_id,\n        account: userinfo.account,\n        username: userinfo.username,\n        update_pwd: false,\n        password: '',\n        updateuserpwd1: '',\n        user_status: userinfo.user_status\n      };\n      // console.log(userinfo)\n    },\n\n    // 修改用户信息\n    async updateUser(formname) {\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            const userinfo = {\n              user_id: this.userUpdateForm.user_id,\n              password: this.userUpdateForm.password,\n              user_status: this.userUpdateForm.user_status\n            };\n            await this.$store.dispatch('backUpdateUserInfo', JSON.stringify(userinfo)).then(res => {\n              this.resetForm(formname);\n              this.userUpdateDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getUserList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 封禁用户\n    async delUser(index, rows) {\n      const username = rows[index].username;\n      const user_id = rows[index].user_id;\n      await this.$confirm(`是否封禁用户 [${username}] ?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await this.$store.dispatch('delUser', {\n            user_id\n          }).then(res => {\n            this.$message({\n              type: 'success',\n              message: res\n            });\n            // 重新获取用户列表\n            this.getUserList();\n          }).catch(err => this.$message({\n            type: 'warning',\n            message: err.message\n          }));\n        } catch (e) {\n          this.$message({\n            type: 'warning',\n            message: e.message\n          });\n        }\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消'\n        });\n      });\n    },\n    // 每页多少条目\n    handleSizeChange(val) {\n      this.page_size = val;\n      this.page_no = 1;\n      this.getUserList();\n    },\n    // 当前第几页\n    handleCurrentChange(val) {\n      this.page_no = val;\n      this.getUserList();\n    },\n    // 获取用户列表\n    async getUserList() {\n      try {\n        const {\n          page_no,\n          page_size\n        } = this;\n        let account = this.searchForm.account;\n        const reg = /^[0-9]{1,12}$/;\n        if (!reg.test(account)) {\n          if (account !== '') {\n            account = '1111111111111111111111111111111111111';\n          }\n        }\n        let username = this.searchForm.username;\n        const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/;\n        if (!name_reg.test(username)) {\n          if (username !== '') {\n            username = '1111111111111111111111111111111111111';\n          }\n        }\n        let user_status = Number.parseInt(this.searchForm.user_status) || 0;\n        if (user_status === 0) user_status = '全部';else if (user_status === 1) user_status = user_status_true;else if (user_status === 2) user_status = user_status_false;\n        await this.$store.dispatch('getUserList', JSON.stringify({\n          page_no,\n          page_size,\n          account,\n          username,\n          user_status\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 获取实验列表\n    async getTestList() {\n      return '111';\n      try {\n        const {\n          page_no,\n          page_size\n        } = this;\n        let account = this.searchForm.account;\n        const reg = /^[0-9]{1,12}$/;\n        if (!reg.test(account)) {\n          if (account !== '') {\n            account = '1111111111111111111111111111111111111';\n          }\n        }\n        let username = this.searchForm.username;\n        const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/;\n        if (!name_reg.test(username)) {\n          if (username !== '') {\n            username = '1111111111111111111111111111111111111';\n          }\n        }\n        let user_status = Number.parseInt(this.searchForm.user_status) || 0;\n        if (user_status === 0) user_status = '全部';else if (user_status === 1) user_status = user_status_true;else if (user_status === 2) user_status = user_status_false;\n        await this.$store.dispatch('getUserList', JSON.stringify({\n          page_no,\n          page_size,\n          account,\n          username,\n          user_status\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 重置搜索表单\n    resetSearchForm(formname) {\n      this.resetForm(formname);\n      this.searchForm.user_status = this.user_status[0].value;\n    },\n    // 搜索\n    search() {\n      this.page_no = 1;\n      this.page_size = this.page_sizes[0];\n      this.getUserList();\n    }\n  }\n};","map":{"version":3,"names":["test_status_true","test_status_false","user_status_true","user_status_false","mapGetters","name","data","validataAccount","rule","value","callback","reg","trim","length","Error","test","validataUsername","validataPassword","validataAddUserPassword1","userAddForm","password","validataUpdateUserPassword1","userUpdateForm","rules","account","required","trigger","validator","username","adduserpwd1","updateuserpwd1","test_status","message","user_status","label","searchForm","page_no","page_size","page_sizes","testAddDialog","userUpdateDialog","testAddForm","user_id","update_pwd","watch","deep","handler","val","computed","mounted","getUserList","getTestList","methods","resetForm","formname","$refs","resetFields","addUser","console","log","validate","vaild","$store","dispatch","JSON","stringify","then","res","$message","type","catch","err","e","addTest","openUpdateUser","index","rows","userinfo","updateUser","delUser","$confirm","confirmButtonText","cancelButtonText","handleSizeChange","handleCurrentChange","name_reg","Number","parseInt","resetSearchForm","search"],"sources":["src/views/Index/Front/AddTest/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"test-list maxWH clearfix\">\r\n        <!-- 搜索 -->\r\n        <div class=\"search\">\r\n            <el-form ref=\"searchUserForm\" class=\"flex maxWH search-form\" :model=\"searchForm\" label-width=\"80px\">\r\n            \r\n                <el-form-item label=\"实验名称\" prop=\"username\">\r\n                    <el-input v-model.trim=\"searchForm.username\" placeholder=\"请输入想查询的名称\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"实验状态\" prop=\"user_status\">\r\n                    <el-select v-model=\"searchForm.user_status\" placeholder=\"请选择实验状态\">\r\n                        <el-option v-for=\"us in user_status\" :key=\"us.value\" :label=\"us.label\" :value=\"us.value\">\r\n                        </el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n                <el-form-item class=\"flex\" style=\"margin-left: -70px;overflow: hidden;\">\r\n                    <el-button type=\"primary\" @click.native.prevent.stop=\"search\">搜索</el-button>\r\n                    <el-button @click.native.prevent.stop=\"resetSearchForm('searchUserForm')\">重置</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n        <!-- 添加 -->\r\n        <el-button type=\"primary\" @click.native.prevent.stop=\"testAddDialog = true\"\r\n            style=\"margin: 15px 0;\">添加实验</el-button>\r\n        <!-- 列表显示用户 -->\r\n        <el-table :data=\"userlist\" border style=\"width: 100%\" max-height=\"250\">\r\n            <el-table-column prop=\"account\" label=\"实验名\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column prop=\"username\" label=\"用户名\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"test_status\" label=\"实验状态\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"create_time\" label=\"创建时间\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" header-align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <div class=\"handler flex-center\">\r\n                        <el-button type=\"warning\" @click.native.prevent.stop=\"openUpdateUser(scope.$index, userlist)\">\r\n                            修改\r\n                        </el-button>\r\n                        <el-button @click.native.prevent=\"delUser(scope.$index, userlist)\" type=\"danger\">\r\n                            封禁\r\n                        </el-button>\r\n                    </div>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <!-- 分页器 -->\r\n        <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"page_no\"\r\n            :page-sizes=\"page_sizes\" :page-size=\"page_size\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n            :total=\"user_count\" style=\"padding: 10px 0;\">\r\n        </el-pagination>\r\n        <!-- dialog -->\r\n        <!-- 添加实验 -->\r\n        <el-dialog title=\"添加实验\" :visible.sync=\"testAddDialog\">\r\n            <!-- el-form-item是el-form的子组件，父组件中使用:model=\"testAddForm\"则子组件中调用父组件的值可以用testAddForm.account-->\r\n            <el-form ref=\"testAddForm\" :model=\"testAddForm\" label-width=\"80px\" :rules=\"rules\">\r\n                 <!-- prop=“规则名” 验证表单里元素属性 -->\r\n                <el-form-item label=\"实验名\" prop=\"account\">\r\n                    <el-input v-model.trim=\"testAddForm.account\" autocomplete=\"off\" placeholder=\"请输入实验名\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"用户名\" prop=\"username\">\r\n                    <el-input v-model.trim=\"testAddForm.username\" autocomplete=\"off\" placeholder=\"请输入用户名\">\r\n                    </el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"实验状态\" prop=\"test_status\">\r\n                    <!-- v-model 实现双向绑定-->\r\n                    <el-radio-group v-model=\"testAddForm.test_status\">\r\n                        <el-radio :label=\"test_status[1].label\"></el-radio>\r\n                        <el-radio :label=\"test_status[2].label\"></el-radio>\r\n                    </el-radio-group>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\" align=\"center\">\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"addTest('testAddForm')\">确 定</el-button>\r\n                <el-button @click.native.prevent.stop=\"resetForm('userAddForm')\">重 置</el-button>\r\n            </div>\r\n        </el-dialog>\r\n        <!-- 修改用户信息 -->\r\n        <el-dialog title=\"修改用户信息\" :visible.sync=\"userUpdateDialog\">\r\n            <el-form ref=\"userUpdateForm\" :model=\"userUpdateForm\" label-width=\"80px\" :rules=\"rules\"\r\n                hide-required-asterisk>\r\n                <el-form-item label=\"账号\">\r\n                    <el-input v-model.trim=\"userUpdateForm.account\" disabled autocomplete=\"off\"\r\n                        placeholder=\"请输入账号\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"用户名\">\r\n                    <el-input v-model.trim=\"userUpdateForm.username\" disabled autocomplete=\"off\" placeholder=\"请输入用户名\">\r\n                    </el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"修改密码\" prop=\"update_pwd\">\r\n                    <el-switch v-model.trim=\"userUpdateForm.update_pwd\"></el-switch>\r\n                </el-form-item>\r\n                <el-form-item v-if=\"userUpdateForm.update_pwd\" label=\"密码\" prop=\"password\">\r\n                    <el-input type=\"password\" v-model.trim=\"userUpdateForm.password\"\r\n                        :disabled=\"!userUpdateForm.update_pwd\" autocomplete=\"off\" placeholder=\"请输入密码\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item v-if=\"userUpdateForm.update_pwd\" label=\"确认密码\" prop=\"updateuserpwd1\">\r\n                    <el-input type=\"password\" v-model.trim=\"userUpdateForm.updateuserpwd1\"\r\n                        :disabled=\"!userUpdateForm.update_pwd\" autocomplete=\"off\" placeholder=\"请确认密码\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"用户状态\" prop=\"user_status\">\r\n                    <el-radio-group v-model=\"userUpdateForm.user_status\">\r\n                        <el-radio :label=\"user_status[1].label\"></el-radio>\r\n                        <el-radio :label=\"user_status[2].label\"></el-radio>\r\n                    </el-radio-group>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\" align=\"center\">\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"updateUser('userUpdateForm')\">确 定</el-button>\r\n                <el-button @click.native.prevent.stop=\"resetForm('userUpdateForm')\">重 置</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { test_status_true, test_status_false } from '@/config'\r\nimport { user_status_true, user_status_false } from '@/config'\r\nimport { mapGetters } from 'vuex'\r\nexport default {\r\n    name: 'UserList',\r\n    data() {\r\n        const validataAccount = (rule, value, callback) => {\r\n            // const reg = /^[0-9]{6,12}$/\r\n            const reg =/^[\\u4e00-\\u9fa5]{1,7}$|^[\\dA-Za-z_]{1,14}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入账号'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('实验名不能超过7个汉字或者14个字符'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataUsername = (rule, value, callback) => {\r\n            //const reg = /^[\\u4e00-\\u9fa5]{2,6}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入用户名'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataPassword = (rule, value, callback) => {\r\n            const reg = /^[a-zA-Z0-9_]{8,12}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入密码'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('密码由8到12位的字母、数字或下划线组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataAddUserPassword1 = (rule, value, callback) => {\r\n            if (this.userAddForm.password.trim() === '') {\r\n                callback(new Error('请先输入密码'))\r\n            } else if (value.trim().length <= 0) {\r\n                callback(new Error('确认密码不得为空'))\r\n            } else if (value.trim() !== this.userAddForm.password) {\r\n                callback(new Error('两次输入密码不一致'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataUpdateUserPassword1 = (rule, value, callback) => {\r\n            if (this.userUpdateForm.password.trim() === '') {\r\n                callback(new Error('请先输入密码'))\r\n            } else if (value.trim().length <= 0) {\r\n                callback(new Error('确认密码不得为空'))\r\n            } else if (value.trim() !== this.userUpdateForm.password) {\r\n                callback(new Error('两次输入密码不一致'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        return {\r\n            // 表单验证规则\r\n            rules: {\r\n                account: [{ required: true, trigger: ['blur', 'change'], validator: validataAccount }],\r\n                username: [{ required: true, trigger: ['blur', 'change'], validator: validataUsername }],\r\n                password: [{ required: true, trigger: ['blur', 'change'], validator: validataPassword }],\r\n                adduserpwd1: [{ required: true, trigger: ['blur', 'change'], validator: validataAddUserPassword1 }],\r\n                updateuserpwd1: [{ required: true, trigger: ['blur', 'change'], validator: validataUpdateUserPassword1 }],\r\n                test_status: [{ required: true, message: '请选择用户状态', trigger: 'change' }],\r\n            },\r\n            user_status: [\r\n                { label: '全部', value: '0' },\r\n                { label: user_status_true, value: '1' },\r\n                { label: user_status_false, value: '2' },\r\n            ],\r\n            test_status: [\r\n                { label: '全部', value: '0' },\r\n                { label: test_status_true, value: '1' },\r\n                { label: test_status_false, value: '2' },\r\n            ],\r\n            // 搜索用户列表的表单\r\n            searchForm: {\r\n                account: '',\r\n                username: '',\r\n                user_status: ''\r\n            },\r\n            // 当前页\r\n            page_no: 1,\r\n            // 初始化每页条目数\r\n            page_size: 8,\r\n            // 个数选择器\r\n            page_sizes: [8, 16, 30, 50, 100],\r\n            // 添加实验信息的表单\r\n            testAddDialog: false,\r\n            // 修改用户信息的表单\r\n            userUpdateDialog: false,\r\n            // 添加实验信息表单\r\n            testAddForm: {\r\n                account: '',\r\n                username: '',\r\n                test_status:''\r\n            },\r\n            // 修改用户信息表单\r\n            userUpdateForm: {\r\n                user_id: 0, // 用户id\r\n                account: '', // 账号\r\n                username: '', // 用户名\r\n                update_pwd: false, // 是否修改密码\r\n                password: '', // 密码\r\n                updateuserpwd1: '', // 确认密码\r\n                user_status: user_status_true, // 用户状态\r\n            },\r\n        }\r\n    },\r\n    watch: {\r\n        // 修改用户信息时监听是否需要修改密码\r\n        'userUpdateForm.update_pwd': {\r\n            deep: true,\r\n            handler(val) {\r\n                if (!val) {\r\n                    this.userUpdateForm.password = ''\r\n                    this.userUpdateForm.updateuserpwd1 = ''\r\n                }\r\n            },\r\n        },\r\n    },\r\n    // vuex中mapGetters的使用\r\n    computed: {\r\n        ...mapGetters(['user_id', 'userlist','testlist', 'user_count'])\r\n    },\r\n    mounted() {\r\n        this.searchForm.user_status = this.user_status[0].value\r\n        // 获取用户列表\r\n        this.getUserList()\r\n        this.getTestList()\r\n    },\r\n    methods: {\r\n        // 重置表单\r\n        resetForm(formname) {\r\n            this.$refs[formname].resetFields()\r\n        },\r\n        // 添加用户信息\r\n        async addUser(formname) {\r\n            console.log(this.$refs[formname])\r\n            \r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    console.log('11111')\r\n                    return\r\n                    try {\r\n                        await this.$store.dispatch('addUser', JSON.stringify(this.userAddForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.testAddDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getUserList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n         // 添加实验\r\n         async addTest(formname) {\r\n            // console.log(this.$refs[formname])\r\n            // return\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) { \r\n                    try {\r\n                        await this.$store.dispatch('addTest', JSON.stringify(this.testAddForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.testAddDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getTestList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        // 打开修改用户信息的遮罩页\r\n        openUpdateUser(index, rows) {\r\n            this.userUpdateDialog = true\r\n            const userinfo = rows[index]\r\n            // 获取当前用户的信息\r\n            this.userUpdateForm = {\r\n                user_id: userinfo.user_id,\r\n                account: userinfo.account,\r\n                username: userinfo.username,\r\n                update_pwd: false,\r\n                password: '',\r\n                updateuserpwd1: '',\r\n                user_status: userinfo.user_status,\r\n            }\r\n            // console.log(userinfo)\r\n        },\r\n        // 修改用户信息\r\n        async updateUser(formname) {\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    try {\r\n                        const userinfo = {\r\n                            user_id: this.userUpdateForm.user_id,\r\n                            password: this.userUpdateForm.password,\r\n                            user_status: this.userUpdateForm.user_status\r\n                        }\r\n                        await this.$store.dispatch('backUpdateUserInfo', JSON.stringify(userinfo))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.userUpdateDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getUserList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        // 封禁用户\r\n        async delUser(index, rows) {\r\n            const username = rows[index].username\r\n            const user_id = rows[index].user_id\r\n            await this.$confirm(`是否封禁用户 [${username}] ?`, '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                try {\r\n                    await this.$store.dispatch('delUser', { user_id })\r\n                        .then(res => {\r\n                            this.$message({ type: 'success', message: res })\r\n                            // 重新获取用户列表\r\n                            this.getUserList()\r\n                        }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                } catch (e) {\r\n                    this.$message({ type: 'warning', message: e.message })\r\n                }\r\n            }).catch(() => {\r\n                this.$message({ type: 'info', message: '已取消' })\r\n            })\r\n        },\r\n        // 每页多少条目\r\n        handleSizeChange(val) {\r\n            this.page_size = val\r\n            this.page_no = 1\r\n            this.getUserList()\r\n        },\r\n        // 当前第几页\r\n        handleCurrentChange(val) {\r\n            this.page_no = val\r\n            this.getUserList()\r\n        },\r\n        // 获取用户列表\r\n        async getUserList() {\r\n            try {\r\n                const { page_no, page_size } = this\r\n                let account = this.searchForm.account\r\n                const reg = /^[0-9]{1,12}$/\r\n                if (!reg.test(account)) {\r\n                    if (account !== '') {\r\n                        account = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let username = this.searchForm.username\r\n                const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/\r\n                if (!name_reg.test(username)) {\r\n                    if (username !== '') {\r\n                        username = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let user_status = Number.parseInt(this.searchForm.user_status) || 0\r\n                if (user_status === 0) user_status = '全部'\r\n                else if (user_status === 1) user_status = user_status_true\r\n                else if (user_status === 2) user_status = user_status_false\r\n                await this.$store.dispatch('getUserList', JSON.stringify({ page_no, page_size, account, username, user_status }))\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n         // 获取实验列表\r\n         async getTestList() {\r\n            return '111'\r\n            try {\r\n                const { page_no, page_size } = this\r\n                let account = this.searchForm.account\r\n                const reg = /^[0-9]{1,12}$/\r\n                if (!reg.test(account)) {\r\n                    if (account !== '') {\r\n                        account = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let username = this.searchForm.username\r\n                const name_reg = /^[\\u4e00-\\u9fa50-9a-zA-Z]{1,6}$/\r\n                if (!name_reg.test(username)) {\r\n                    if (username !== '') {\r\n                        username = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let user_status = Number.parseInt(this.searchForm.user_status) || 0\r\n                if (user_status === 0) user_status = '全部'\r\n                else if (user_status === 1) user_status = user_status_true\r\n                else if (user_status === 2) user_status = user_status_false\r\n                await this.$store.dispatch('getUserList', JSON.stringify({ page_no, page_size, account, username, user_status }))\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n        // 重置搜索表单\r\n        resetSearchForm(formname) {\r\n            this.resetForm(formname)\r\n            this.searchForm.user_status = this.user_status[0].value\r\n        },\r\n        // 搜索\r\n        search() {\r\n            this.page_no = 1\r\n            this.page_size = this.page_sizes[0]\r\n            this.getUserList()\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.test-list {\r\n    padding:20px 5%;\r\n    .search {\r\n        width: 100%;\r\n        height: 80px;\r\n        \r\n        box-sizing: border-box;\r\n        border: 1px solid rgb(220, 220, 220);\r\n        padding-top: 15px;\r\n        overflow: hidden;\r\n\r\n        .search-form {\r\n            min-width: 400px;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}