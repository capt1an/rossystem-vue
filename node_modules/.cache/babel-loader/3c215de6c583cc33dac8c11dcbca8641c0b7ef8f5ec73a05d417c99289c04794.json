{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'imageList',\n  data() {\n    const validataTitle = (rule, value, callback) => {\n      const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！「」——~、@]{3,12}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入标题'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('标题由3到12位的数字、字母、汉字或部分符号组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataDetail = (rule, value, callback) => {\n      const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！…. ：；，「」——~、\\s@]{15,100}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入容器详情'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('容器详情由15到100位的数字、字母、汉字或部分符号组成'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      // 当前页\n      page_no: 1,\n      // 初始化每页条目数\n      page_size: 8,\n      // 个数选择器\n      page_sizes: [8, 16, 30, 50, 100],\n      image_status: [{\n        label: '全部',\n        value: '0'\n      }, {\n        label: '正常',\n        value: '1'\n      }, {\n        label: '超时',\n        value: '2'\n      }],\n      // 表单验证规则\n      rules: {\n        container_title: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataTitle\n        }],\n        container_detail: [{\n          required: true,\n          trigger: 'blur',\n          validator: validataDetail\n        }]\n      },\n      // 搜索容器列表的表单\n      searchForm: {\n        account: '',\n        // 用户账号\n        seat_no: '',\n        // 座位编号\n        image_status: '' // 预约状态\n      }\n    };\n  },\n\n  computed: {\n    ...mapGetters(['imagelist', 'image_count'])\n  },\n  mounted() {\n    this.searchForm.image_status = this.image_status[0].value;\n    // 获取预约列表\n    this.getimageList();\n  },\n  methods: {\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    // 重置搜索表单\n    resetSearchForm(formname) {\n      this.resetForm(formname);\n      this.searchForm.image_status = this.image_status[0].value;\n    },\n    // 每页多少条目\n    handleSizeChange(val) {\n      this.page_size = val;\n      this.page_no = 1;\n      this.getimageList();\n    },\n    // 当前第几页\n    handleCurrentChange(val) {\n      this.page_no = val;\n      this.getimageList();\n    },\n    // 搜索\n    search() {\n      this.page_no = 1;\n      this.page_size = this.page_sizes[0];\n      this.getimageList();\n    },\n    // 获取预约信息列表\n    async getimageList() {\n      try {\n        const {\n          page_no,\n          page_size\n        } = this;\n        let account = this.searchForm.account;\n        const ac_reg = /^[0-9]{1,12}$/;\n        if (!ac_reg.test(account)) {\n          if (account !== '') {\n            account = '1111111111111111111111111111111111111';\n          }\n        }\n        let seat_no = this.searchForm.seat_no;\n        const reg = /^[0-9-]{1,5}$/;\n        if (!reg.test(seat_no)) {\n          if (seat_no !== '') {\n            seat_no = '1111111111111111111111111111111111111';\n          }\n        }\n        let image_status = Number.parseInt(this.searchForm.image_status) || 0;\n        if (image_status === 0) image_status = '全部';else if (image_status === 1) image_status = '正常';else if (image_status === 2) image_status = '超时';\n        await this.$store.dispatch('getimageList', JSON.stringify({\n          page_no,\n          page_size,\n          account,\n          seat_no,\n          image_status\n        }));\n      } catch (e) {\n        console.warn(e.message);\n      }\n    },\n    // 移除超时的预约信息\n    async delimage(index, rows) {\n      await this.$confirm('确认移除该预约信息?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const {\n            image_id,\n            seat_id\n          } = rows[index];\n          await this.$store.dispatch('delimage', {\n            image_id,\n            seat_id\n          }).then(async res => {\n            this.$message({\n              type: 'success',\n              message: res\n            });\n            // 重新获取预约信息列表\n            await this.getimageList();\n          }).catch(err => this.$message({\n            type: 'warning',\n            message: err.message\n          }));\n        } catch (e) {\n          console.warn(e.message);\n        }\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消'\n        });\n      });\n    },\n    // 移除所有超时的预约记录\n    async delAllimage() {\n      await this.$confirm('此操作将清空超时的预约记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await this.$store.dispatch('clearTimeoutimage').then(async res => {\n            this.$message({\n              type: 'success',\n              message: res\n            });\n            // 重新获取预约信息列表\n            await this.getimageList();\n          }).catch(err => this.$message({\n            type: 'warning',\n            message: err.message\n          }));\n        } catch (e) {\n          console.warn(e.message);\n        }\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消'\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","validataTitle","rule","value","callback","reg","trim","length","Error","test","validataDetail","page_no","page_size","page_sizes","image_status","label","rules","container_title","required","trigger","validator","container_detail","searchForm","account","seat_no","computed","mounted","getimageList","methods","resetForm","formname","$refs","resetFields","resetSearchForm","handleSizeChange","val","handleCurrentChange","search","ac_reg","Number","parseInt","$store","dispatch","JSON","stringify","e","console","warn","message","delimage","index","rows","$confirm","confirmButtonText","cancelButtonText","type","then","image_id","seat_id","res","$message","catch","err","delAllimage"],"sources":["src/views/Index/Back/ImageList/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"image-list maxWH clearfix\">\r\n        <!-- 搜索 -->\r\n        <div class=\"search\">\r\n            <el-form ref=\"searchcontainerForm\" class=\"flex maxWH search-form\" :model=\"searchForm\" label-width=\"80px\">\r\n                <el-select v-model=\"searchForm.querySearch\" clearable placeholder=\"请选择搜索类型\">\r\n                    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n                <el-form-item label=\"\" prop=\"key\">\r\n                    <el-input v-model.trim=\"searchForm.key\" placeholder=\"请输入关键字\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item class=\"flex\" style=\"margin-left: -70px;overflow: hidden;\">\r\n                    <el-button type=\"primary\" @click.native.prevent.stop=\"search\">搜索</el-button>\r\n                    <el-button @click.native.prevent.stop=\"resetForm('searchForm')\">重置</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n        <el-button type=\"danger\" :disabled=\"image_count < 1\" @click.native.prevent.stop=\"delAllimage\"\r\n            style=\"margin: 15px 0;\">移除所有超时记录</el-button>\r\n        <!-- 列表显示预约信息 -->\r\n        <el-table :data=\"imagelist\" border style=\"width: 100%\" max-height=\"250\">\r\n            <el-table-column prop=\"account\" label=\"用户账号\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"seat_no\" label=\"座位编号\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"begin_time\" label=\"预约开始时间\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column prop=\"end_time\" label=\"预约结束时间\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column prop=\"image_status\" label=\"预约状态\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-tag :type=\"scope.row.image_status === '正常' ? 'info' : 'warning'\">{{\r\n                        scope.row.image_status\r\n                    }}</el-tag>\r\n                </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" header-align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <div class=\"handler flex-center\">\r\n                        <el-button :disabled=\"scope.row.image_status === '正常'\"\r\n                            @click.native.prevent=\"delimage(scope.$index, imagelist)\" type=\"danger\">\r\n                            移除\r\n                        </el-button>\r\n                    </div>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <!-- 分页器 -->\r\n        <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"page_no\"\r\n            :page-sizes=\"page_sizes\" :page-size=\"page_size\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n            :total=\"image_count\" style=\"padding: 10px 0;\">\r\n        </el-pagination>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nexport default {\r\n    name: 'imageList',\r\n    data() {\r\n        const validataTitle = (rule, value, callback) => {\r\n            const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！「」——~、@]{3,12}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入标题'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('标题由3到12位的数字、字母、汉字或部分符号组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataDetail = (rule, value, callback) => {\r\n            const reg = /^[0-9A-Za-z\\u4e00-\\u9fa5,!.*&^%#+=-_:;。，！…. ：；，「」——~、\\s@]{15,100}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入容器详情'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('容器详情由15到100位的数字、字母、汉字或部分符号组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        return {\r\n            // 当前页\r\n            page_no: 1,\r\n            // 初始化每页条目数\r\n            page_size: 8,\r\n            // 个数选择器\r\n            page_sizes: [8, 16, 30, 50, 100],\r\n            image_status: [\r\n                { label: '全部', value: '0' },\r\n                { label: '正常', value: '1' },\r\n                { label: '超时', value: '2' },\r\n            ],\r\n            // 表单验证规则\r\n            rules: {\r\n                container_title: [{ required: true, trigger: ['blur', 'change'], validator: validataTitle }],\r\n                container_detail: [{ required: true, trigger: 'blur', validator: validataDetail }],\r\n            },\r\n            // 搜索容器列表的表单\r\n            searchForm: {\r\n                account: '', // 用户账号\r\n                seat_no: '', // 座位编号\r\n                image_status: '' // 预约状态\r\n            },\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapGetters(['imagelist', 'image_count'])\r\n    },\r\n    mounted() {\r\n        this.searchForm.image_status = this.image_status[0].value\r\n        // 获取预约列表\r\n        this.getimageList()\r\n    },\r\n    methods: {\r\n        // 重置表单\r\n        resetForm(formname) {\r\n            this.$refs[formname].resetFields()\r\n        },\r\n        // 重置搜索表单\r\n        resetSearchForm(formname) {\r\n            this.resetForm(formname)\r\n            this.searchForm.image_status = this.image_status[0].value\r\n        },\r\n        // 每页多少条目\r\n        handleSizeChange(val) {\r\n            this.page_size = val\r\n            this.page_no = 1\r\n            this.getimageList()\r\n        },\r\n        // 当前第几页\r\n        handleCurrentChange(val) {\r\n            this.page_no = val\r\n            this.getimageList()\r\n        },\r\n        // 搜索\r\n        search() {\r\n            this.page_no = 1\r\n            this.page_size = this.page_sizes[0]\r\n            this.getimageList()\r\n        },\r\n        // 获取预约信息列表\r\n        async getimageList() {\r\n            try {\r\n                const { page_no, page_size } = this\r\n                let account = this.searchForm.account\r\n                const ac_reg = /^[0-9]{1,12}$/\r\n                if (!ac_reg.test(account)) {\r\n                    if (account !== '') {\r\n                        account = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let seat_no = this.searchForm.seat_no\r\n                const reg = /^[0-9-]{1,5}$/\r\n                if (!reg.test(seat_no)) {\r\n                    if (seat_no !== '') {\r\n                        seat_no = '1111111111111111111111111111111111111'\r\n                    }\r\n                }\r\n                let image_status = Number.parseInt(this.searchForm.image_status) || 0\r\n                if (image_status === 0) image_status = '全部'\r\n                else if (image_status === 1) image_status = '正常'\r\n                else if (image_status === 2) image_status = '超时'\r\n                await this.$store.dispatch('getimageList', JSON.stringify({ page_no, page_size, account, seat_no, image_status }))\r\n            } catch (e) {\r\n                console.warn(e.message)\r\n            }\r\n        },\r\n        // 移除超时的预约信息\r\n        async delimage(index, rows) {\r\n            await this.$confirm('确认移除该预约信息?', '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                try {\r\n                    const { image_id, seat_id } = rows[index]\r\n                    await this.$store.dispatch('delimage', { image_id, seat_id })\r\n                        .then(async res => {\r\n                            this.$message({ type: 'success', message: res })\r\n                            // 重新获取预约信息列表\r\n                            await this.getimageList()\r\n                        }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                } catch (e) {\r\n                    console.warn(e.message)\r\n                }\r\n            }).catch(() => { this.$message({ type: 'info', message: '已取消' }) })\r\n        },\r\n        // 移除所有超时的预约记录\r\n        async delAllimage() {\r\n            await this.$confirm('此操作将清空超时的预约记录, 是否继续?', '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning'\r\n            }).then(async () => {\r\n                try {\r\n                    await this.$store.dispatch('clearTimeoutimage')\r\n                        .then(async res => {\r\n                            this.$message({ type: 'success', message: res })\r\n                            // 重新获取预约信息列表\r\n                            await this.getimageList()\r\n                        }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                } catch (e) {\r\n                    console.warn(e.message)\r\n                }\r\n            }).catch(() => { this.$message({ type: 'info', message: '已取消' }) })\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.image-list {\r\n    .search {\r\n        width: 100%;\r\n        height: 80px;\r\n        box-sizing: border-box;\r\n        border: 1px solid rgb(220, 220, 220);\r\n        padding-top: 15px;\r\n        overflow: hidden;\r\n\r\n        .search-form {\r\n            min-width: 400px;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}