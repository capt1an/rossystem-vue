{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'UserList',\n  data() {\n    const options = [{\n      value: 'username',\n      label: '用户名'\n    }, {\n      value: 'nick_name',\n      label: '昵称'\n    }, {\n      value: 'role',\n      label: '用户类型'\n    }];\n    const validataNickName = (rule, value, callback) => {\n      const reg = /^[\\u4e00-\\u9fa5]{2,6}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入昵称'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('昵称由2到6位的汉字组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataUsername = (rule, value, callback) => {\n      const reg = /^[a-zA-Z0-9]{2,6}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入用户名'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('用户名由2到6位的字母、数字组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataPassword = (rule, value, callback) => {\n      const reg = /^[a-zA-Z0-9_]{8,12}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入密码'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('密码由8到12位的字母、数字或下划线组成'));\n      } else {\n        callback();\n      }\n    };\n    const validataAddUserPassword1 = (rule, value, callback) => {\n      if (this.userAddForm.password.trim() === '') {\n        callback(new Error('请先输入密码'));\n      } else if (value.trim().length <= 0) {\n        callback(new Error('确认密码不得为空'));\n      } else if (value.trim() !== this.userAddForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    const validataUpdateUserPassword1 = (rule, value, callback) => {\n      if (this.userUpdateForm.password.trim() === '') {\n        callback(new Error('请先输入密码'));\n      } else if (value.trim().length <= 0) {\n        callback(new Error('确认密码不得为空'));\n      } else if (value.trim() !== this.userUpdateForm.password) {\n        callback(new Error('两次输入密码不一致'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      options,\n      // 表单验证规则\n      rules: {\n        nickName: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataNickName\n        }],\n        username: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataUsername\n        }],\n        password: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataPassword\n        }],\n        adduserpwd1: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataAddUserPassword1\n        }],\n        updateuserpwd1: [{\n          required: true,\n          trigger: ['blur', 'change'],\n          validator: validataUpdateUserPassword1\n        }],\n        role: [{\n          required: true,\n          message: '请选择用户类型',\n          trigger: 'change'\n        }]\n      },\n      // 搜索用户列表的表单\n      searchForm: {\n        querySearch: '',\n        key: ''\n      },\n      // 当前页\n      page: 1,\n      // 初始化每页条目数\n      limit: 8,\n      // 个数选择器\n      page_sizes: [8, 16, 30, 50, 100],\n      // 添加用户信息的表单\n      userAddDialog: false,\n      // 修改用户信息的表单\n      userUpdateDialog: false,\n      // 添加用户信息表单\n      userAddForm: {\n        nickName: '',\n        username: '',\n        password: '',\n        adduserpwd1: '',\n        role: ''\n      },\n      // 修改用户信息表单\n      userUpdateForm: {\n        user_id: 0,\n        // 用户id\n        nickname: '',\n        // 昵称\n        username: '',\n        // 用户名\n        update_pwd: false,\n        // 是否修改密码\n        password: '',\n        // 密码\n        updateuserpwd1: '' // 确认密码\n      }\n    };\n  },\n\n  watch: {\n    // 修改用户信息时监听是否需要修改密码\n    'userUpdateForm.update_pwd': {\n      deep: true,\n      handler(val) {\n        if (!val) {\n          this.userUpdateForm.password = '';\n          this.userUpdateForm.updateuserpwd1 = '';\n        }\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['user_id', 'userlist', 'user_count'])\n  },\n  mounted() {\n    // 获取用户列表\n    this.getUserList();\n  },\n  methods: {\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    // 添加用户信息\n    async addUser(formname) {\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            await this.$store.dispatch('addUser', JSON.stringify(this.userAddForm)).then(res => {\n              this.resetForm(formname);\n              this.userAddDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getUserList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 打开修改用户信息的遮罩页\n    openUpdateUser(index, rows) {\n      this.userUpdateDialog = true;\n      const userinfo = rows[index];\n      // 获取当前用户的信息\n      this.userUpdateForm = {\n        user_id: userinfo.user_id,\n        account: userinfo.account,\n        username: userinfo.username,\n        update_pwd: false,\n        password: '',\n        updateuserpwd1: ''\n        // user_status: userinfo.user_status,\n      };\n      // console.log(userinfo)\n    },\n\n    // 修改用户信息\n    async updateUser(formname) {\n      await this.$refs[formname].validate(async vaild => {\n        if (vaild) {\n          try {\n            const userinfo = {\n              user_id: this.userUpdateForm.user_id,\n              password: this.userUpdateForm.password\n            };\n            await this.$store.dispatch('backUpdateUserInfo', JSON.stringify(userinfo)).then(res => {\n              this.resetForm(formname);\n              this.userUpdateDialog = false;\n              this.$message({\n                type: 'success',\n                message: res\n              });\n              // 重新获取用户列表\n              this.getUserList();\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    },\n    // 删除用户\n    async delUser(index, rows) {\n      const username = rows[index].username;\n      const id = rows[index].id;\n      await this.$confirm(`是否删除用户 [ ${username} ] ?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await this.$store.dispatch('delUser', JSON.stringify({\n            id\n          })).then(() => {\n            this.$message({\n              type: 'success',\n              message: res\n            });\n            // 重新获取用户列表\n            // console.log(\"重新获取用户列表\")\n            // this.getUserList()\n          }).catch(err => this.$message({\n            type: 'warning',\n            message: err.message\n          })).finally(() => {\n            this.getUserList();\n          });\n        } catch (e) {\n          this.$message({\n            type: 'warning',\n            message: e.message\n          });\n        }\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消'\n        });\n      });\n    },\n    // 每页多少条目\n    handleSizeChange(val) {\n      this.limit = val;\n      this.page = 1;\n      this.getUserList();\n    },\n    // 当前第几页\n    handleCurrentChange(val) {\n      this.page = val;\n      this.getUserList();\n    },\n    // 获取用户列表\n    async getUserList() {\n      try {\n        const {\n          page,\n          limit\n        } = this;\n        let querySearch = this.searchForm.querySearch;\n        let value = this.searchForm.key;\n        await this.$store.dispatch('getUserList', JSON.stringify({\n          querySearch,\n          value,\n          page,\n          limit\n        }));\n      } catch (e) {\n        this.$message({\n          type: 'warning',\n          message: e.message\n        });\n      }\n    },\n    // 重置搜索表单\n    resetSearchForm(formname) {\n      this.resetForm(formname);\n    },\n    // 搜索\n    search() {\n      this.page = 1;\n      this.limit = this.page_sizes[0];\n      this.getUserList();\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","options","value","label","validataNickName","rule","callback","reg","trim","length","Error","test","validataUsername","validataPassword","validataAddUserPassword1","userAddForm","password","validataUpdateUserPassword1","userUpdateForm","rules","nickName","required","trigger","validator","username","adduserpwd1","updateuserpwd1","role","message","searchForm","querySearch","key","page","limit","page_sizes","userAddDialog","userUpdateDialog","user_id","nickname","update_pwd","watch","deep","handler","val","computed","mounted","getUserList","methods","resetForm","formname","$refs","resetFields","addUser","validate","vaild","$store","dispatch","JSON","stringify","then","res","$message","type","catch","err","e","openUpdateUser","index","rows","userinfo","account","updateUser","delUser","id","$confirm","confirmButtonText","cancelButtonText","finally","handleSizeChange","handleCurrentChange","resetSearchForm","search"],"sources":["src/views/Index/Back/UserList/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"user-list maxWH clearfix\">\r\n        <!-- 搜索 -->\r\n        <div class=\"search\">\r\n            <el-form ref=\"searchTestForm\" class=\"flex maxWH search-form\" :model=\"searchForm\" label-width=\"80px\">\r\n\r\n                <el-select v-model=\"searchForm.querySearch\" placeholder=\"请选择搜索类型\">\r\n                    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\r\n                    </el-option>\r\n                </el-select>\r\n                <el-form-item label=\"\" prop=\"key\">\r\n                    <el-input v-model.trim=\"searchForm.key\" placeholder=\"请输入关键字\"></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item class=\"flex\" style=\"margin-left: -70px;overflow: hidden;\">\r\n                    <el-button type=\"primary\" @click.native.prevent.stop=\"search\">搜索</el-button>\r\n                    <el-button @click.native.prevent.stop=\"resetForm('searchForm')\">重置</el-button>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n        <!-- 添加 -->\r\n        <el-button type=\"primary\" @click.native.prevent.stop=\"userAddDialog = true\" style=\"margin: 15px 0;\">添加用户</el-button>\r\n        <!-- 列表显示用户 -->\r\n        <el-table :data=\"userlist\" border style=\"width: 100%\" max-height=\"250\">\r\n            <el-table-column prop=\"nickName\" label=\"昵称\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column prop=\"username\" label=\"用户名\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"role\" label=\"用户类型\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"containerCount\" label=\"容器数量\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"registerTime\" label=\"创建时间\" show-overflow-tooltip>\r\n            </el-table-column>\r\n            <el-table-column label=\"操作\" header-align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <div class=\"handler flex-center\">\r\n                        <el-button type=\"warning\" @click.native.prevent.stop=\"openUpdateUser(scope.$index, userlist)\">\r\n                            修改\r\n                        </el-button>\r\n                        <el-button @click.native.prevent=\"delUser(scope.$index, userlist)\" type=\"danger\">\r\n                            删除\r\n                        </el-button>\r\n                    </div>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <!-- 分页器 -->\r\n        <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"page\"\r\n            :page-sizes=\"page_sizes\" :page-size=\"limit\" layout=\"total, sizes, prev, pager, next, jumper\" :total=\"user_count\"\r\n            style=\"padding: 10px 0;\">\r\n        </el-pagination>\r\n        <!-- dialog -->\r\n        <!-- 添加用户 -->\r\n        <el-dialog title=\"添加用户\" :visible.sync=\"userAddDialog\">\r\n            <el-form ref=\"userAddForm\" :model=\"userAddForm\" label-width=\"80px\" :rules=\"rules\">\r\n                <el-form-item label=\"用户名\" prop=\"username\">\r\n                    <el-input v-model.trim=\"userAddForm.username\" autocomplete=\"off\" placeholder=\"请输入用户名\">\r\n                    </el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"昵称\" prop=\"nickName\">\r\n                    <el-input v-model.trim=\"userAddForm.nickName\" autocomplete=\"off\" placeholder=\"请输入昵称\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"密码\" prop=\"password\">\r\n                    <el-input type=\"password\" v-model.trim=\"userAddForm.password\" autocomplete=\"off\"\r\n                        placeholder=\"请输入密码\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"确认密码\" prop=\"adduserpwd1\">\r\n                    <el-input type=\"password\" v-model.trim=\"userAddForm.adduserpwd1\" autocomplete=\"off\"\r\n                        placeholder=\"请确认密码\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"用户类型\" prop=\"role\">\r\n                    <el-radio-group v-model=\"userAddForm.role\">\r\n                        <el-radio :label=\"2\">管理员</el-radio>\r\n                        <el-radio :label=\"1\">普通用户</el-radio>\r\n                    </el-radio-group>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\" align=\"center\">\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"addUser('userAddForm')\">确 定</el-button>\r\n                <el-button @click.native.prevent.stop=\"resetForm('userAddForm')\">重 置</el-button>\r\n            </div>\r\n        </el-dialog>\r\n        <!-- 修改用户信息 -->\r\n        <el-dialog title=\"修改用户信息\" :visible.sync=\"userUpdateDialog\">\r\n            <el-form ref=\"userUpdateForm\" :model=\"userUpdateForm\" label-width=\"80px\" :rules=\"rules\" hide-required-asterisk>\r\n                <el-form-item label=\"昵称\">\r\n                    <el-input v-model.trim=\"userUpdateForm.nickname\" disabled autocomplete=\"off\" placeholder=\"请输入账号\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"用户名\">\r\n                    <el-input v-model.trim=\"userUpdateForm.username\" disabled autocomplete=\"off\" placeholder=\"请输入用户名\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"修改密码\" prop=\"update_pwd\">\r\n                    <el-switch v-model.trim=\"userUpdateForm.update_pwd\"></el-switch>\r\n                </el-form-item>\r\n                <el-form-item v-if=\"userUpdateForm.update_pwd\" label=\"密码\" prop=\"password\">\r\n                    <el-input type=\"password\" v-model.trim=\"userUpdateForm.password\" :disabled=\"!userUpdateForm.update_pwd\"\r\n                        autocomplete=\"off\" placeholder=\"请输入密码\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item v-if=\"userUpdateForm.update_pwd\" label=\"确认密码\" prop=\"updateuserpwd1\">\r\n                    <el-input type=\"password\" v-model.trim=\"userUpdateForm.updateuserpwd1\"\r\n                        :disabled=\"!userUpdateForm.update_pwd\" autocomplete=\"off\" placeholder=\"请确认密码\"></el-input>\r\n                </el-form-item>\r\n\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\" align=\"center\">\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"updateUser('userUpdateForm')\">确 定</el-button>\r\n                <el-button @click.native.prevent.stop=\"resetForm('userUpdateForm')\">重 置</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\nexport default {\r\n    name: 'UserList',\r\n    data() {\r\n        const options = [\r\n            {\r\n                value: 'username',\r\n                label: '用户名',\r\n            },\r\n            {\r\n                value: 'nick_name',\r\n                label: '昵称',\r\n            },\r\n            {\r\n                value: 'role',\r\n                label: '用户类型',\r\n            },\r\n        ]\r\n        const validataNickName = (rule, value, callback) => {\r\n            const reg = /^[\\u4e00-\\u9fa5]{2,6}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入昵称'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('昵称由2到6位的汉字组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataUsername = (rule, value, callback) => {\r\n            const reg = /^[a-zA-Z0-9]{2,6}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入用户名'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('用户名由2到6位的字母、数字组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataPassword = (rule, value, callback) => {\r\n            const reg = /^[a-zA-Z0-9_]{8,12}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入密码'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('密码由8到12位的字母、数字或下划线组成'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataAddUserPassword1 = (rule, value, callback) => {\r\n            if (this.userAddForm.password.trim() === '') {\r\n                callback(new Error('请先输入密码'))\r\n            } else if (value.trim().length <= 0) {\r\n                callback(new Error('确认密码不得为空'))\r\n            } else if (value.trim() !== this.userAddForm.password) {\r\n                callback(new Error('两次输入密码不一致'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataUpdateUserPassword1 = (rule, value, callback) => {\r\n            if (this.userUpdateForm.password.trim() === '') {\r\n                callback(new Error('请先输入密码'))\r\n            } else if (value.trim().length <= 0) {\r\n                callback(new Error('确认密码不得为空'))\r\n            } else if (value.trim() !== this.userUpdateForm.password) {\r\n                callback(new Error('两次输入密码不一致'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        return {\r\n            options,\r\n\r\n            // 表单验证规则\r\n            rules: {\r\n                nickName: [{ required: true, trigger: ['blur', 'change'], validator: validataNickName }],\r\n                username: [{ required: true, trigger: ['blur', 'change'], validator: validataUsername }],\r\n                password: [{ required: true, trigger: ['blur', 'change'], validator: validataPassword }],\r\n                adduserpwd1: [{ required: true, trigger: ['blur', 'change'], validator: validataAddUserPassword1 }],\r\n                updateuserpwd1: [{ required: true, trigger: ['blur', 'change'], validator: validataUpdateUserPassword1 }],\r\n                role: [{ required: true, message: '请选择用户类型', trigger: 'change' }],\r\n            },\r\n\r\n            // 搜索用户列表的表单\r\n            searchForm: {\r\n                querySearch: '',\r\n                key: '',\r\n            },\r\n            // 当前页\r\n            page: 1,\r\n            // 初始化每页条目数\r\n            limit: 8,\r\n            // 个数选择器\r\n            page_sizes: [8, 16, 30, 50, 100],\r\n            // 添加用户信息的表单\r\n            userAddDialog: false,\r\n            // 修改用户信息的表单\r\n            userUpdateDialog: false,\r\n            // 添加用户信息表单\r\n            userAddForm: {\r\n                nickName: '',\r\n                username: '',\r\n                password: '',\r\n                adduserpwd1: '',\r\n                role: '',\r\n            },\r\n            // 修改用户信息表单\r\n            userUpdateForm: {\r\n                user_id: 0, // 用户id\r\n                nickname: '', // 昵称\r\n                username: '', // 用户名\r\n                update_pwd: false, // 是否修改密码\r\n                password: '', // 密码\r\n                updateuserpwd1: '', // 确认密码\r\n            }\r\n\r\n        }\r\n    },\r\n    watch: {\r\n        // 修改用户信息时监听是否需要修改密码\r\n        'userUpdateForm.update_pwd': {\r\n            deep: true,\r\n            handler(val) {\r\n                if (!val) {\r\n                    this.userUpdateForm.password = ''\r\n                    this.userUpdateForm.updateuserpwd1 = ''\r\n                }\r\n            },\r\n        },\r\n    },\r\n    computed: {\r\n        ...mapGetters(['user_id', 'userlist', 'user_count'])\r\n    },\r\n    mounted() {\r\n        // 获取用户列表\r\n        this.getUserList()\r\n    },\r\n    methods: {\r\n        // 重置表单\r\n        resetForm(formname) {\r\n            this.$refs[formname].resetFields();\r\n        },\r\n        // 添加用户信息\r\n        async addUser(formname) {\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    try {\r\n                        await this.$store.dispatch('addUser', JSON.stringify(this.userAddForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.userAddDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getUserList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        // 打开修改用户信息的遮罩页\r\n        openUpdateUser(index, rows) {\r\n            this.userUpdateDialog = true\r\n            const userinfo = rows[index]\r\n            // 获取当前用户的信息\r\n            this.userUpdateForm = {\r\n                user_id: userinfo.user_id,\r\n                account: userinfo.account,\r\n                username: userinfo.username,\r\n                update_pwd: false,\r\n                password: '',\r\n                updateuserpwd1: '',\r\n                // user_status: userinfo.user_status,\r\n            }\r\n            // console.log(userinfo)\r\n        },\r\n        // 修改用户信息\r\n        async updateUser(formname) {\r\n            await this.$refs[formname].validate(async vaild => {\r\n                if (vaild) {\r\n                    try {\r\n                        const userinfo = {\r\n                            user_id: this.userUpdateForm.user_id,\r\n                            password: this.userUpdateForm.password,\r\n                        }\r\n                        await this.$store.dispatch('backUpdateUserInfo', JSON.stringify(userinfo))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                this.userUpdateDialog = false\r\n                                this.$message({ type: 'success', message: res })\r\n                                // 重新获取用户列表\r\n                                this.getUserList()\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        // 删除用户\r\n        async delUser(index, rows) {\r\n            const username = rows[index].username\r\n            const id = rows[index].id\r\n            await this.$confirm(`是否删除用户 [ ${username} ] ?`, '提示', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning',\r\n            }).then(async () => {\r\n                try {\r\n                    await this.$store.dispatch('delUser', JSON.stringify({ id }))\r\n                        .then(() => {\r\n                            this.$message({ type: 'success', message: res })\r\n                            // 重新获取用户列表\r\n                            // console.log(\"重新获取用户列表\")\r\n                            // this.getUserList()\r\n                        }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                        .finally(() => {\r\n                            this.getUserList()\r\n                        })\r\n                } catch (e) {\r\n                    this.$message({ type: 'warning', message: e.message })\r\n                }\r\n            }).catch(() => {\r\n                this.$message({ type: 'info', message: '已取消' })\r\n            })\r\n        },\r\n        // 每页多少条目\r\n        handleSizeChange(val) {\r\n            this.limit = val\r\n            this.page = 1\r\n            this.getUserList()\r\n        },\r\n        // 当前第几页\r\n        handleCurrentChange(val) {\r\n            this.page = val\r\n            this.getUserList()\r\n        },\r\n        // 获取用户列表\r\n        async getUserList() {\r\n            try {\r\n                const { page, limit } = this\r\n                let querySearch = this.searchForm.querySearch\r\n                let value = this.searchForm.key\r\n\r\n                await this.$store.dispatch('getUserList', JSON.stringify({ querySearch, value, page, limit }))\r\n            } catch (e) {\r\n                this.$message({ type: 'warning', message: e.message })\r\n            }\r\n        },\r\n        // 重置搜索表单\r\n        resetSearchForm(formname) {\r\n            this.resetForm(formname)\r\n        },\r\n        // 搜索\r\n        search() {\r\n            this.page = 1\r\n            this.limit = this.page_sizes[0]\r\n            this.getUserList()\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.user-list {\r\n    .search {\r\n        width: 100%;\r\n        height: 80px;\r\n        box-sizing: border-box;\r\n        border: 1px solid rgb(220, 220, 220);\r\n        padding-top: 15px;\r\n        overflow: hidden;\r\n\r\n        .search-form {\r\n            min-width: 400px;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}