{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getAccount } from '@/utils/account';\nexport default {\n  name: 'Login',\n  data() {\n    const validataAccount = (rule, value, callback) => {\n      // const reg = /^[0-9]{6,12}$/\n      // if (value.trim().length <= 0) {\n      //     callback(new Error('请输入账号'))\n      // } else if (!reg.test(value.trim())) {\n      //     callback(new Error('账号格式错误'))\n      // } else {\n      //     callback()\n      // }\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入账号'));\n      } else {\n        callback();\n      }\n    };\n    const validataPassword = (rule, value, callback) => {\n      const reg = /^[a-zA-Z0-9_]{8,12}$/;\n      if (value.trim().length <= 0) {\n        callback(new Error('请输入密码'));\n      } else if (!reg.test(value.trim())) {\n        callback(new Error('密码格式错误'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      rules: {\n        username: [{\n          required: true,\n          trigger: 'blur',\n          validator: validataAccount\n        }],\n        password: [{\n          required: true,\n          trigger: 'blur',\n          validator: validataPassword\n        }]\n      },\n      loginForm: {\n        username: getAccount() || '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    // 重置表单\n    resetForm(formname) {\n      this.$refs[formname].resetFields();\n    },\n    // 用户登录\n    async login(formname) {\n      //关键字async放到函数前面，用于表示函数是一个异步函数\n      await this.$refs[formname].validate(async vaild => {\n        //预验证\n        if (vaild) {\n          try {\n            // console.log(this.loginForm)\n            await this.$store.dispatch('userLogin', JSON.stringify(this.loginForm)).then(res => {\n              this.resetForm(formname);\n              console.log(\"没跳\");\n              // this.$message({ type: 'success', message: res })\n              this.$router.push('/');\n              console.log(\"跳了\");\n            }).catch(err => this.$message({\n              type: 'warning',\n              message: err.message\n            }));\n          } catch (e) {\n            this.$message({\n              type: 'warning',\n              message: e.message\n            });\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["getAccount","name","data","validataAccount","rule","value","callback","trim","length","Error","validataPassword","reg","test","rules","username","required","trigger","validator","password","loginForm","methods","resetForm","formname","$refs","resetFields","login","validate","vaild","$store","dispatch","JSON","stringify","then","res","console","log","$router","push","catch","err","$message","type","message","e"],"sources":["src/views/Login/index.vue"],"sourcesContent":["<template>\r\n    <div class=\"login maxWH flex-center\">\r\n        <el-form ref=\"loginForm\" :model=\"loginForm\" label-color=\"#fff\" label-width=\"80px\" :rules=\"rules\" class=\"login-form\"\r\n            hide-required-asterisk @keyup.native.enter=\"login('loginForm')\">\r\n            <el-form-item prop=\"username\" class=\"login-item\">\r\n                <span slot=\"label\"><i class=\"el-icon-user\"></i>账号</span>\r\n                <el-input v-model.trim=\"loginForm.username\" autocomplete=\"off\" placeholder=\"请输入账号\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item prop=\"password\" class=\"login-item\">\r\n                <span slot=\"label\"><i class=\"el-icon-unlock\"></i>密码</span>\r\n                <el-input type=\"password\" v-model.trim=\"loginForm.password\" autocomplete=\"off\"\r\n                    placeholder=\"请输入密码\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item align=\"center\" style=\"box-sizing: border-box;padding-right: 80px;\">\r\n                <el-button type=\"primary\" @click.native.prevent.stop=\"login('loginForm')\">登录</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { getAccount } from '@/utils/account'\r\nexport default {\r\n    name: 'Login',\r\n    data() {\r\n        const validataAccount = (rule, value, callback) => {\r\n            // const reg = /^[0-9]{6,12}$/\r\n            // if (value.trim().length <= 0) {\r\n            //     callback(new Error('请输入账号'))\r\n            // } else if (!reg.test(value.trim())) {\r\n            //     callback(new Error('账号格式错误'))\r\n            // } else {\r\n            //     callback()\r\n            // }\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入账号'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        const validataPassword = (rule, value, callback) => {\r\n            const reg = /^[a-zA-Z0-9_]{8,12}$/\r\n            if (value.trim().length <= 0) {\r\n                callback(new Error('请输入密码'))\r\n            } else if (!reg.test(value.trim())) {\r\n                callback(new Error('密码格式错误'))\r\n            } else {\r\n                callback()\r\n            }\r\n        }\r\n        return {\r\n            rules: {\r\n                username: [{ required: true, trigger: 'blur', validator: validataAccount }],\r\n                password: [{ required: true, trigger: 'blur', validator: validataPassword }]\r\n            },\r\n            loginForm: {\r\n                username: getAccount() || '',\r\n                password: ''\r\n            },\r\n        }\r\n    },\r\n    methods: {\r\n        // 重置表单\r\n        resetForm(formname) {\r\n            this.$refs[formname].resetFields()\r\n        },\r\n        // 用户登录\r\n        async login(formname) { //关键字async放到函数前面，用于表示函数是一个异步函数\r\n            await this.$refs[formname].validate(async vaild => { //预验证\r\n                if (vaild) {\r\n                    try {\r\n                        // console.log(this.loginForm)\r\n                        await this.$store.dispatch('userLogin', JSON.stringify(this.loginForm))\r\n                            .then(res => {\r\n                                this.resetForm(formname)\r\n                                console.log(\"没跳\")\r\n                                // this.$message({ type: 'success', message: res })\r\n                                this.$router.push('/')\r\n                                console.log(\"跳了\")\r\n                            }).catch(err => this.$message({ type: 'warning', message: err.message }))\r\n                    } catch (e) {\r\n                        this.$message({ type: 'warning', message: e.message })\r\n                    }\r\n                }\r\n            })\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.login {\r\n    background: url('../../assets/bg.png') no-repeat;\r\n    background-size: cover;\r\n\r\n    .login-form {\r\n        width: 330px;\r\n        height: 230px;\r\n        background-color: rgba(255, 255, 255);\r\n        box-sizing: border-box;\r\n        padding-top: 30px;\r\n        border-radius: 10px;\r\n    }\r\n}\r\n</style>"],"mappings":";AAqBA,SAAAA,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA,MAAAC,eAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAAD,KAAA,CAAAE,IAAA,GAAAC,MAAA;QACAF,QAAA,KAAAG,KAAA;MACA;QACAH,QAAA;MACA;IACA;IACA,MAAAI,gBAAA,GAAAA,CAAAN,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,MAAAK,GAAA;MACA,IAAAN,KAAA,CAAAE,IAAA,GAAAC,MAAA;QACAF,QAAA,KAAAG,KAAA;MACA,YAAAE,GAAA,CAAAC,IAAA,CAAAP,KAAA,CAAAE,IAAA;QACAD,QAAA,KAAAG,KAAA;MACA;QACAH,QAAA;MACA;IACA;IACA;MACAO,KAAA;QACAC,QAAA;UAAAC,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAd;QAAA;QACAe,QAAA;UAAAH,QAAA;UAAAC,OAAA;UAAAC,SAAA,EAAAP;QAAA;MACA;MACAS,SAAA;QACAL,QAAA,EAAAd,UAAA;QACAkB,QAAA;MACA;IACA;EACA;EACAE,OAAA;IACA;IACAC,UAAAC,QAAA;MACA,KAAAC,KAAA,CAAAD,QAAA,EAAAE,WAAA;IACA;IACA;IACA,MAAAC,MAAAH,QAAA;MAAA;MACA,WAAAC,KAAA,CAAAD,QAAA,EAAAI,QAAA,OAAAC,KAAA;QAAA;QACA,IAAAA,KAAA;UACA;YACA;YACA,WAAAC,MAAA,CAAAC,QAAA,cAAAC,IAAA,CAAAC,SAAA,MAAAZ,SAAA,GACAa,IAAA,CAAAC,GAAA;cACA,KAAAZ,SAAA,CAAAC,QAAA;cACAY,OAAA,CAAAC,GAAA;cACA;cACA,KAAAC,OAAA,CAAAC,IAAA;cACAH,OAAA,CAAAC,GAAA;YACA,GAAAG,KAAA,CAAAC,GAAA,SAAAC,QAAA;cAAAC,IAAA;cAAAC,OAAA,EAAAH,GAAA,CAAAG;YAAA;UACA,SAAAC,CAAA;YACA,KAAAH,QAAA;cAAAC,IAAA;cAAAC,OAAA,EAAAC,CAAA,CAAAD;YAAA;UACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}